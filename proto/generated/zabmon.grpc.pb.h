// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zabmon.proto
#ifndef GRPC_zabmon_2eproto__INCLUDED
#define GRPC_zabmon_2eproto__INCLUDED

#include "zabmon.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace zabmon {

// MonitorService
class MonitorService final {
 public:
  static constexpr char const* service_full_name() {
    return "zabmon.MonitorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // createHost - запрос создания хоста
    virtual ::grpc::Status createHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::zabmon::Host* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>> AsynccreateHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>>(AsynccreateHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>> PrepareAsynccreateHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>>(PrepareAsynccreateHostRaw(context, request, cq));
    }
    // createGroup - запрос создания группы хостов
    virtual ::grpc::Status createGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::zabmon::Group* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Group>> AsynccreateGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Group>>(AsynccreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Group>> PrepareAsynccreateGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Group>>(PrepareAsynccreateGroupRaw(context, request, cq));
    }
    // createTemplate - запрос создания шаблона
    virtual ::grpc::Status createTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::zabmon::Template* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Template>> AsynccreateTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Template>>(AsynccreateTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Template>> PrepareAsynccreateTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Template>>(PrepareAsynccreateTemplateRaw(context, request, cq));
    }
    // createItem - запрос создания item
    virtual ::grpc::Status createItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::zabmon::Item* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Item>> AsynccreateItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Item>>(AsynccreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Item>> PrepareAsynccreateItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Item>>(PrepareAsynccreateItemRaw(context, request, cq));
    }
    // deleteHost - запрос удаления хоста
    virtual ::grpc::Status deleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncdeleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdeleteHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdeleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdeleteHostRaw(context, request, cq));
    }
    // deleteGroup - запрос удаления группы хостов
    virtual ::grpc::Status deleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncdeleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdeleteGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdeleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdeleteGroupRaw(context, request, cq));
    }
    // deleteTemplate - запрос удаления шаблона
    virtual ::grpc::Status deleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncdeleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdeleteTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdeleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdeleteTemplateRaw(context, request, cq));
    }
    // deleteItem - запрос удаления item
    virtual ::grpc::Status deleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncdeleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdeleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdeleteItemRaw(context, request, cq));
    }
    // updateHost - запрос обновления хоста
    virtual ::grpc::Status updateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::zabmon::Host* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>> AsyncupdateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>>(AsyncupdateHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>> PrepareAsyncupdateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>>(PrepareAsyncupdateHostRaw(context, request, cq));
    }
    // listHosts - запрос получения списка хостов
    virtual ::grpc::Status listHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::zabmon::ListHostsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListHostsResponse>> AsynclistHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListHostsResponse>>(AsynclistHostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListHostsResponse>> PrepareAsynclistHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListHostsResponse>>(PrepareAsynclistHostsRaw(context, request, cq));
    }
    // listGroups - запрос получения списка групп
    virtual ::grpc::Status listGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::zabmon::ListGroupsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListGroupsResponse>> AsynclistGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListGroupsResponse>>(AsynclistGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListGroupsResponse>> PrepareAsynclistGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListGroupsResponse>>(PrepareAsynclistGroupsRaw(context, request, cq));
    }
    // listTemplates - запрос списка шаблонов
    virtual ::grpc::Status listTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::zabmon::ListTemplatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListTemplatesResponse>> AsynclistTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListTemplatesResponse>>(AsynclistTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListTemplatesResponse>> PrepareAsynclistTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListTemplatesResponse>>(PrepareAsynclistTemplatesRaw(context, request, cq));
    }
    // listItems - запрос списка items
    virtual ::grpc::Status listItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::zabmon::ListItemsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsResponse>> AsynclistItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsResponse>>(AsynclistItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsResponse>> PrepareAsynclistItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsResponse>>(PrepareAsynclistItemsRaw(context, request, cq));
    }
    // listItemsValues - запрос на получение списка значений
    virtual ::grpc::Status listItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::zabmon::ListItemsValuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsValuesResponse>> AsynclistItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsValuesResponse>>(AsynclistItemsValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsValuesResponse>> PrepareAsynclistItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsValuesResponse>>(PrepareAsynclistItemsValuesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // createHost - запрос создания хоста
      virtual void createHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest* request, ::zabmon::Host* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest* request, ::zabmon::Host* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // createGroup - запрос создания группы хостов
      virtual void createGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest* request, ::zabmon::Group* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest* request, ::zabmon::Group* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // createTemplate - запрос создания шаблона
      virtual void createTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest* request, ::zabmon::Template* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest* request, ::zabmon::Template* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // createItem - запрос создания item
      virtual void createItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest* request, ::zabmon::Item* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest* request, ::zabmon::Item* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // deleteHost - запрос удаления хоста
      virtual void deleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // deleteGroup - запрос удаления группы хостов
      virtual void deleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // deleteTemplate - запрос удаления шаблона
      virtual void deleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // deleteItem - запрос удаления item
      virtual void deleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // updateHost - запрос обновления хоста
      virtual void updateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest* request, ::zabmon::Host* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest* request, ::zabmon::Host* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // listHosts - запрос получения списка хостов
      virtual void listHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest* request, ::zabmon::ListHostsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void listHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest* request, ::zabmon::ListHostsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // listGroups - запрос получения списка групп
      virtual void listGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest* request, ::zabmon::ListGroupsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void listGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest* request, ::zabmon::ListGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // listTemplates - запрос списка шаблонов
      virtual void listTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest* request, ::zabmon::ListTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void listTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest* request, ::zabmon::ListTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // listItems - запрос списка items
      virtual void listItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest* request, ::zabmon::ListItemsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void listItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest* request, ::zabmon::ListItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // listItemsValues - запрос на получение списка значений
      virtual void listItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest* request, ::zabmon::ListItemsValuesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void listItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest* request, ::zabmon::ListItemsValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>* AsynccreateHostRaw(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>* PrepareAsynccreateHostRaw(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Group>* AsynccreateGroupRaw(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Group>* PrepareAsynccreateGroupRaw(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Template>* AsynccreateTemplateRaw(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Template>* PrepareAsynccreateTemplateRaw(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Item>* AsynccreateItemRaw(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Item>* PrepareAsynccreateItemRaw(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdeleteHostRaw(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdeleteHostRaw(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdeleteGroupRaw(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdeleteGroupRaw(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdeleteTemplateRaw(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdeleteTemplateRaw(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdeleteItemRaw(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdeleteItemRaw(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>* AsyncupdateHostRaw(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::Host>* PrepareAsyncupdateHostRaw(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListHostsResponse>* AsynclistHostsRaw(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListHostsResponse>* PrepareAsynclistHostsRaw(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListGroupsResponse>* AsynclistGroupsRaw(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListGroupsResponse>* PrepareAsynclistGroupsRaw(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListTemplatesResponse>* AsynclistTemplatesRaw(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListTemplatesResponse>* PrepareAsynclistTemplatesRaw(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsResponse>* AsynclistItemsRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsResponse>* PrepareAsynclistItemsRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsValuesResponse>* AsynclistItemsValuesRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zabmon::ListItemsValuesResponse>* PrepareAsynclistItemsValuesRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::zabmon::Host* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>> AsynccreateHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>>(AsynccreateHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>> PrepareAsynccreateHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>>(PrepareAsynccreateHostRaw(context, request, cq));
    }
    ::grpc::Status createGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::zabmon::Group* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Group>> AsynccreateGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Group>>(AsynccreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Group>> PrepareAsynccreateGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Group>>(PrepareAsynccreateGroupRaw(context, request, cq));
    }
    ::grpc::Status createTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::zabmon::Template* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Template>> AsynccreateTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Template>>(AsynccreateTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Template>> PrepareAsynccreateTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Template>>(PrepareAsynccreateTemplateRaw(context, request, cq));
    }
    ::grpc::Status createItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::zabmon::Item* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Item>> AsynccreateItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Item>>(AsynccreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Item>> PrepareAsynccreateItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Item>>(PrepareAsynccreateItemRaw(context, request, cq));
    }
    ::grpc::Status deleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncdeleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdeleteHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdeleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdeleteHostRaw(context, request, cq));
    }
    ::grpc::Status deleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncdeleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdeleteGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdeleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdeleteGroupRaw(context, request, cq));
    }
    ::grpc::Status deleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncdeleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdeleteTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdeleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdeleteTemplateRaw(context, request, cq));
    }
    ::grpc::Status deleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncdeleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdeleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdeleteItemRaw(context, request, cq));
    }
    ::grpc::Status updateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::zabmon::Host* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>> AsyncupdateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>>(AsyncupdateHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>> PrepareAsyncupdateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::Host>>(PrepareAsyncupdateHostRaw(context, request, cq));
    }
    ::grpc::Status listHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::zabmon::ListHostsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListHostsResponse>> AsynclistHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListHostsResponse>>(AsynclistHostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListHostsResponse>> PrepareAsynclistHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListHostsResponse>>(PrepareAsynclistHostsRaw(context, request, cq));
    }
    ::grpc::Status listGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::zabmon::ListGroupsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListGroupsResponse>> AsynclistGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListGroupsResponse>>(AsynclistGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListGroupsResponse>> PrepareAsynclistGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListGroupsResponse>>(PrepareAsynclistGroupsRaw(context, request, cq));
    }
    ::grpc::Status listTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::zabmon::ListTemplatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListTemplatesResponse>> AsynclistTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListTemplatesResponse>>(AsynclistTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListTemplatesResponse>> PrepareAsynclistTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListTemplatesResponse>>(PrepareAsynclistTemplatesRaw(context, request, cq));
    }
    ::grpc::Status listItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::zabmon::ListItemsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsResponse>> AsynclistItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsResponse>>(AsynclistItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsResponse>> PrepareAsynclistItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsResponse>>(PrepareAsynclistItemsRaw(context, request, cq));
    }
    ::grpc::Status listItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::zabmon::ListItemsValuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsValuesResponse>> AsynclistItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsValuesResponse>>(AsynclistItemsValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsValuesResponse>> PrepareAsynclistItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsValuesResponse>>(PrepareAsynclistItemsValuesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest* request, ::zabmon::Host* response, std::function<void(::grpc::Status)>) override;
      void createHost(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest* request, ::zabmon::Host* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest* request, ::zabmon::Group* response, std::function<void(::grpc::Status)>) override;
      void createGroup(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest* request, ::zabmon::Group* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest* request, ::zabmon::Template* response, std::function<void(::grpc::Status)>) override;
      void createTemplate(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest* request, ::zabmon::Template* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest* request, ::zabmon::Item* response, std::function<void(::grpc::Status)>) override;
      void createItem(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest* request, ::zabmon::Item* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void deleteHost(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void deleteGroup(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void deleteTemplate(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void deleteItem(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest* request, ::zabmon::Host* response, std::function<void(::grpc::Status)>) override;
      void updateHost(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest* request, ::zabmon::Host* response, ::grpc::ClientUnaryReactor* reactor) override;
      void listHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest* request, ::zabmon::ListHostsResponse* response, std::function<void(::grpc::Status)>) override;
      void listHosts(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest* request, ::zabmon::ListHostsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void listGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest* request, ::zabmon::ListGroupsResponse* response, std::function<void(::grpc::Status)>) override;
      void listGroups(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest* request, ::zabmon::ListGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void listTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest* request, ::zabmon::ListTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void listTemplates(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest* request, ::zabmon::ListTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void listItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest* request, ::zabmon::ListItemsResponse* response, std::function<void(::grpc::Status)>) override;
      void listItems(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest* request, ::zabmon::ListItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void listItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest* request, ::zabmon::ListItemsValuesResponse* response, std::function<void(::grpc::Status)>) override;
      void listItemsValues(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest* request, ::zabmon::ListItemsValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zabmon::Host>* AsynccreateHostRaw(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Host>* PrepareAsynccreateHostRaw(::grpc::ClientContext* context, const ::zabmon::CreateHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Group>* AsynccreateGroupRaw(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Group>* PrepareAsynccreateGroupRaw(::grpc::ClientContext* context, const ::zabmon::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Template>* AsynccreateTemplateRaw(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Template>* PrepareAsynccreateTemplateRaw(::grpc::ClientContext* context, const ::zabmon::CreateTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Item>* AsynccreateItemRaw(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Item>* PrepareAsynccreateItemRaw(::grpc::ClientContext* context, const ::zabmon::CreateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdeleteHostRaw(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdeleteHostRaw(::grpc::ClientContext* context, const ::zabmon::DeleteHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdeleteGroupRaw(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdeleteGroupRaw(::grpc::ClientContext* context, const ::zabmon::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdeleteTemplateRaw(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdeleteTemplateRaw(::grpc::ClientContext* context, const ::zabmon::DeleteTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdeleteItemRaw(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdeleteItemRaw(::grpc::ClientContext* context, const ::zabmon::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Host>* AsyncupdateHostRaw(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::Host>* PrepareAsyncupdateHostRaw(::grpc::ClientContext* context, const ::zabmon::UpdateHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListHostsResponse>* AsynclistHostsRaw(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListHostsResponse>* PrepareAsynclistHostsRaw(::grpc::ClientContext* context, const ::zabmon::ListHostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListGroupsResponse>* AsynclistGroupsRaw(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListGroupsResponse>* PrepareAsynclistGroupsRaw(::grpc::ClientContext* context, const ::zabmon::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListTemplatesResponse>* AsynclistTemplatesRaw(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListTemplatesResponse>* PrepareAsynclistTemplatesRaw(::grpc::ClientContext* context, const ::zabmon::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsResponse>* AsynclistItemsRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsResponse>* PrepareAsynclistItemsRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsValuesResponse>* AsynclistItemsValuesRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zabmon::ListItemsValuesResponse>* PrepareAsynclistItemsValuesRaw(::grpc::ClientContext* context, const ::zabmon::ListItemsValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createHost_;
    const ::grpc::internal::RpcMethod rpcmethod_createGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_createTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_createItem_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteHost_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteItem_;
    const ::grpc::internal::RpcMethod rpcmethod_updateHost_;
    const ::grpc::internal::RpcMethod rpcmethod_listHosts_;
    const ::grpc::internal::RpcMethod rpcmethod_listGroups_;
    const ::grpc::internal::RpcMethod rpcmethod_listTemplates_;
    const ::grpc::internal::RpcMethod rpcmethod_listItems_;
    const ::grpc::internal::RpcMethod rpcmethod_listItemsValues_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // createHost - запрос создания хоста
    virtual ::grpc::Status createHost(::grpc::ServerContext* context, const ::zabmon::CreateHostRequest* request, ::zabmon::Host* response);
    // createGroup - запрос создания группы хостов
    virtual ::grpc::Status createGroup(::grpc::ServerContext* context, const ::zabmon::CreateGroupRequest* request, ::zabmon::Group* response);
    // createTemplate - запрос создания шаблона
    virtual ::grpc::Status createTemplate(::grpc::ServerContext* context, const ::zabmon::CreateTemplateRequest* request, ::zabmon::Template* response);
    // createItem - запрос создания item
    virtual ::grpc::Status createItem(::grpc::ServerContext* context, const ::zabmon::CreateItemRequest* request, ::zabmon::Item* response);
    // deleteHost - запрос удаления хоста
    virtual ::grpc::Status deleteHost(::grpc::ServerContext* context, const ::zabmon::DeleteHostRequest* request, ::google::protobuf::Empty* response);
    // deleteGroup - запрос удаления группы хостов
    virtual ::grpc::Status deleteGroup(::grpc::ServerContext* context, const ::zabmon::DeleteGroupRequest* request, ::google::protobuf::Empty* response);
    // deleteTemplate - запрос удаления шаблона
    virtual ::grpc::Status deleteTemplate(::grpc::ServerContext* context, const ::zabmon::DeleteTemplateRequest* request, ::google::protobuf::Empty* response);
    // deleteItem - запрос удаления item
    virtual ::grpc::Status deleteItem(::grpc::ServerContext* context, const ::zabmon::DeleteItemRequest* request, ::google::protobuf::Empty* response);
    // updateHost - запрос обновления хоста
    virtual ::grpc::Status updateHost(::grpc::ServerContext* context, const ::zabmon::UpdateHostRequest* request, ::zabmon::Host* response);
    // listHosts - запрос получения списка хостов
    virtual ::grpc::Status listHosts(::grpc::ServerContext* context, const ::zabmon::ListHostsRequest* request, ::zabmon::ListHostsResponse* response);
    // listGroups - запрос получения списка групп
    virtual ::grpc::Status listGroups(::grpc::ServerContext* context, const ::zabmon::ListGroupsRequest* request, ::zabmon::ListGroupsResponse* response);
    // listTemplates - запрос списка шаблонов
    virtual ::grpc::Status listTemplates(::grpc::ServerContext* context, const ::zabmon::ListTemplatesRequest* request, ::zabmon::ListTemplatesResponse* response);
    // listItems - запрос списка items
    virtual ::grpc::Status listItems(::grpc::ServerContext* context, const ::zabmon::ListItemsRequest* request, ::zabmon::ListItemsResponse* response);
    // listItemsValues - запрос на получение списка значений
    virtual ::grpc::Status listItemsValues(::grpc::ServerContext* context, const ::zabmon::ListItemsValuesRequest* request, ::zabmon::ListItemsValuesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createHost() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createHost(::grpc::ServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateHost(::grpc::ServerContext* context, ::zabmon::CreateHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::Host>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createGroup() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGroup(::grpc::ServerContext* context, ::zabmon::CreateGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::Group>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createTemplate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_createTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateTemplate(::grpc::ServerContext* context, ::zabmon::CreateTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::Template>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createItem() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_createItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createItem(::grpc::ServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateItem(::grpc::ServerContext* context, ::zabmon::CreateItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::Item>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteHost() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_deleteHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteHost(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteHost(::grpc::ServerContext* context, ::zabmon::DeleteHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteGroup() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_deleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteGroup(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteGroup(::grpc::ServerContext* context, ::zabmon::DeleteGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteTemplate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_deleteTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteTemplate(::grpc::ServerContext* context, ::zabmon::DeleteTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteItem() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_deleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteItem(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteItem(::grpc::ServerContext* context, ::zabmon::DeleteItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateHost() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_updateHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateHost(::grpc::ServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateHost(::grpc::ServerContext* context, ::zabmon::UpdateHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::Host>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listHosts() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_listHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listHosts(::grpc::ServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistHosts(::grpc::ServerContext* context, ::zabmon::ListHostsRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::ListHostsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listGroups() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_listGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listGroups(::grpc::ServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistGroups(::grpc::ServerContext* context, ::zabmon::ListGroupsRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::ListGroupsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listTemplates() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_listTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listTemplates(::grpc::ServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistTemplates(::grpc::ServerContext* context, ::zabmon::ListTemplatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::ListTemplatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listItems() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_listItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItems(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistItems(::grpc::ServerContext* context, ::zabmon::ListItemsRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::ListItemsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listItemsValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listItemsValues() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_listItemsValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItemsValues(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistItemsValues(::grpc::ServerContext* context, ::zabmon::ListItemsValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::zabmon::ListItemsValuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createHost<WithAsyncMethod_createGroup<WithAsyncMethod_createTemplate<WithAsyncMethod_createItem<WithAsyncMethod_deleteHost<WithAsyncMethod_deleteGroup<WithAsyncMethod_deleteTemplate<WithAsyncMethod_deleteItem<WithAsyncMethod_updateHost<WithAsyncMethod_listHosts<WithAsyncMethod_listGroups<WithAsyncMethod_listTemplates<WithAsyncMethod_listItems<WithAsyncMethod_listItemsValues<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createHost() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateHostRequest, ::zabmon::Host>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::CreateHostRequest* request, ::zabmon::Host* response) { return this->createHost(context, request, response); }));}
    void SetMessageAllocatorFor_createHost(
        ::grpc::MessageAllocator< ::zabmon::CreateHostRequest, ::zabmon::Host>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateHostRequest, ::zabmon::Host>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createHost(::grpc::ServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createHost(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createGroup() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateGroupRequest, ::zabmon::Group>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::CreateGroupRequest* request, ::zabmon::Group* response) { return this->createGroup(context, request, response); }));}
    void SetMessageAllocatorFor_createGroup(
        ::grpc::MessageAllocator< ::zabmon::CreateGroupRequest, ::zabmon::Group>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateGroupRequest, ::zabmon::Group>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createTemplate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateTemplateRequest, ::zabmon::Template>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::CreateTemplateRequest* request, ::zabmon::Template* response) { return this->createTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_createTemplate(
        ::grpc::MessageAllocator< ::zabmon::CreateTemplateRequest, ::zabmon::Template>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateTemplateRequest, ::zabmon::Template>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createItem() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateItemRequest, ::zabmon::Item>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::CreateItemRequest* request, ::zabmon::Item* response) { return this->createItem(context, request, response); }));}
    void SetMessageAllocatorFor_createItem(
        ::grpc::MessageAllocator< ::zabmon::CreateItemRequest, ::zabmon::Item>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::CreateItemRequest, ::zabmon::Item>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createItem(::grpc::ServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createItem(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteHost() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteHostRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::DeleteHostRequest* request, ::google::protobuf::Empty* response) { return this->deleteHost(context, request, response); }));}
    void SetMessageAllocatorFor_deleteHost(
        ::grpc::MessageAllocator< ::zabmon::DeleteHostRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteHostRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteHost(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteHost(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteGroup() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteGroupRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::DeleteGroupRequest* request, ::google::protobuf::Empty* response) { return this->deleteGroup(context, request, response); }));}
    void SetMessageAllocatorFor_deleteGroup(
        ::grpc::MessageAllocator< ::zabmon::DeleteGroupRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteGroupRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteGroup(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteTemplate() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteTemplateRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::DeleteTemplateRequest* request, ::google::protobuf::Empty* response) { return this->deleteTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_deleteTemplate(
        ::grpc::MessageAllocator< ::zabmon::DeleteTemplateRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteTemplateRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteItem() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteItemRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::DeleteItemRequest* request, ::google::protobuf::Empty* response) { return this->deleteItem(context, request, response); }));}
    void SetMessageAllocatorFor_deleteItem(
        ::grpc::MessageAllocator< ::zabmon::DeleteItemRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::DeleteItemRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteItem(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateHost() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::UpdateHostRequest, ::zabmon::Host>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::UpdateHostRequest* request, ::zabmon::Host* response) { return this->updateHost(context, request, response); }));}
    void SetMessageAllocatorFor_updateHost(
        ::grpc::MessageAllocator< ::zabmon::UpdateHostRequest, ::zabmon::Host>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::UpdateHostRequest, ::zabmon::Host>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateHost(::grpc::ServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateHost(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_listHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listHosts() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::ListHostsRequest, ::zabmon::ListHostsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::ListHostsRequest* request, ::zabmon::ListHostsResponse* response) { return this->listHosts(context, request, response); }));}
    void SetMessageAllocatorFor_listHosts(
        ::grpc::MessageAllocator< ::zabmon::ListHostsRequest, ::zabmon::ListHostsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::ListHostsRequest, ::zabmon::ListHostsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_listHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listHosts(::grpc::ServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listHosts(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_listGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listGroups() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::ListGroupsRequest, ::zabmon::ListGroupsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::ListGroupsRequest* request, ::zabmon::ListGroupsResponse* response) { return this->listGroups(context, request, response); }));}
    void SetMessageAllocatorFor_listGroups(
        ::grpc::MessageAllocator< ::zabmon::ListGroupsRequest, ::zabmon::ListGroupsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::ListGroupsRequest, ::zabmon::ListGroupsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_listGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listGroups(::grpc::ServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_listTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listTemplates() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::ListTemplatesRequest, ::zabmon::ListTemplatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::ListTemplatesRequest* request, ::zabmon::ListTemplatesResponse* response) { return this->listTemplates(context, request, response); }));}
    void SetMessageAllocatorFor_listTemplates(
        ::grpc::MessageAllocator< ::zabmon::ListTemplatesRequest, ::zabmon::ListTemplatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::ListTemplatesRequest, ::zabmon::ListTemplatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_listTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listTemplates(::grpc::ServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listTemplates(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_listItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listItems() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::ListItemsRequest, ::zabmon::ListItemsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::ListItemsRequest* request, ::zabmon::ListItemsResponse* response) { return this->listItems(context, request, response); }));}
    void SetMessageAllocatorFor_listItems(
        ::grpc::MessageAllocator< ::zabmon::ListItemsRequest, ::zabmon::ListItemsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::ListItemsRequest, ::zabmon::ListItemsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_listItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItems(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listItems(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_listItemsValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listItemsValues() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::zabmon::ListItemsValuesRequest, ::zabmon::ListItemsValuesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zabmon::ListItemsValuesRequest* request, ::zabmon::ListItemsValuesResponse* response) { return this->listItemsValues(context, request, response); }));}
    void SetMessageAllocatorFor_listItemsValues(
        ::grpc::MessageAllocator< ::zabmon::ListItemsValuesRequest, ::zabmon::ListItemsValuesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zabmon::ListItemsValuesRequest, ::zabmon::ListItemsValuesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_listItemsValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItemsValues(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listItemsValues(
      ::grpc::CallbackServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createHost<WithCallbackMethod_createGroup<WithCallbackMethod_createTemplate<WithCallbackMethod_createItem<WithCallbackMethod_deleteHost<WithCallbackMethod_deleteGroup<WithCallbackMethod_deleteTemplate<WithCallbackMethod_deleteItem<WithCallbackMethod_updateHost<WithCallbackMethod_listHosts<WithCallbackMethod_listGroups<WithCallbackMethod_listTemplates<WithCallbackMethod_listItems<WithCallbackMethod_listItemsValues<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createHost() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createHost(::grpc::ServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createGroup() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createTemplate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_createTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createItem() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_createItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createItem(::grpc::ServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteHost() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_deleteHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteHost(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteGroup() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_deleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteGroup(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteTemplate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_deleteTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteItem() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_deleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteItem(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateHost() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_updateHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateHost(::grpc::ServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listHosts() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_listHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listHosts(::grpc::ServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listGroups() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_listGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listGroups(::grpc::ServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listTemplates() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_listTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listTemplates(::grpc::ServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listItems() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_listItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItems(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listItemsValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listItemsValues() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_listItemsValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItemsValues(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createHost() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createHost(::grpc::ServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createGroup() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createTemplate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_createTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createItem() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_createItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createItem(::grpc::ServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteHost() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_deleteHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteHost(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteGroup() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_deleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteGroup(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteTemplate() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_deleteTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteItem() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_deleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteItem(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateHost() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_updateHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateHost(::grpc::ServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_listHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listHosts() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_listHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listHosts(::grpc::ServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistHosts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_listGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listGroups() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_listGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listGroups(::grpc::ServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistGroups(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_listTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listTemplates() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_listTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listTemplates(::grpc::ServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_listItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listItems() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_listItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItems(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistItems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_listItemsValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listItemsValues() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_listItemsValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItemsValues(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistItemsValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createHost() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_createHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createHost(::grpc::ServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createGroup() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createTemplate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_createTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createItem() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_createItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createItem(::grpc::ServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteHost() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteHost(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteGroup() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteGroup(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteTemplate() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteItem() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteItem(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateHost() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateHost(::grpc::ServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listHosts() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->listHosts(context, request, response); }));
    }
    ~WithRawCallbackMethod_listHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listHosts(::grpc::ServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listHosts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listGroups() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->listGroups(context, request, response); }));
    }
    ~WithRawCallbackMethod_listGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listGroups(::grpc::ServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listTemplates() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->listTemplates(context, request, response); }));
    }
    ~WithRawCallbackMethod_listTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listTemplates(::grpc::ServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listTemplates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listItems() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->listItems(context, request, response); }));
    }
    ~WithRawCallbackMethod_listItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItems(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listItems(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listItemsValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listItemsValues() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->listItemsValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_listItemsValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listItemsValues(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listItemsValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createHost() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::CreateHostRequest, ::zabmon::Host>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::CreateHostRequest, ::zabmon::Host>* streamer) {
                       return this->StreamedcreateHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createHost(::grpc::ServerContext* /*context*/, const ::zabmon::CreateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::CreateHostRequest,::zabmon::Host>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createGroup() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::CreateGroupRequest, ::zabmon::Group>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::CreateGroupRequest, ::zabmon::Group>* streamer) {
                       return this->StreamedcreateGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::zabmon::CreateGroupRequest* /*request*/, ::zabmon::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::CreateGroupRequest,::zabmon::Group>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createTemplate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::CreateTemplateRequest, ::zabmon::Template>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::CreateTemplateRequest, ::zabmon::Template>* streamer) {
                       return this->StreamedcreateTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::CreateTemplateRequest* /*request*/, ::zabmon::Template* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::CreateTemplateRequest,::zabmon::Template>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createItem() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::CreateItemRequest, ::zabmon::Item>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::CreateItemRequest, ::zabmon::Item>* streamer) {
                       return this->StreamedcreateItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createItem(::grpc::ServerContext* /*context*/, const ::zabmon::CreateItemRequest* /*request*/, ::zabmon::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::CreateItemRequest,::zabmon::Item>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteHost() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::DeleteHostRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::DeleteHostRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreameddeleteHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteHost(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteHostRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::DeleteHostRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteGroup() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::DeleteGroupRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::DeleteGroupRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreameddeleteGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteGroup(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::DeleteGroupRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteTemplate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::DeleteTemplateRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::DeleteTemplateRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreameddeleteTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteTemplate(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteTemplateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::DeleteTemplateRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteItem() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::DeleteItemRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::DeleteItemRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreameddeleteItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteItem(::grpc::ServerContext* /*context*/, const ::zabmon::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::DeleteItemRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateHost() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::UpdateHostRequest, ::zabmon::Host>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::UpdateHostRequest, ::zabmon::Host>* streamer) {
                       return this->StreamedupdateHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateHost(::grpc::ServerContext* /*context*/, const ::zabmon::UpdateHostRequest* /*request*/, ::zabmon::Host* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::UpdateHostRequest,::zabmon::Host>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listHosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_listHosts() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::ListHostsRequest, ::zabmon::ListHostsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::ListHostsRequest, ::zabmon::ListHostsResponse>* streamer) {
                       return this->StreamedlistHosts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_listHosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listHosts(::grpc::ServerContext* /*context*/, const ::zabmon::ListHostsRequest* /*request*/, ::zabmon::ListHostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistHosts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::ListHostsRequest,::zabmon::ListHostsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_listGroups() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::ListGroupsRequest, ::zabmon::ListGroupsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::ListGroupsRequest, ::zabmon::ListGroupsResponse>* streamer) {
                       return this->StreamedlistGroups(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_listGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listGroups(::grpc::ServerContext* /*context*/, const ::zabmon::ListGroupsRequest* /*request*/, ::zabmon::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistGroups(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::ListGroupsRequest,::zabmon::ListGroupsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_listTemplates() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::ListTemplatesRequest, ::zabmon::ListTemplatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::ListTemplatesRequest, ::zabmon::ListTemplatesResponse>* streamer) {
                       return this->StreamedlistTemplates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_listTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listTemplates(::grpc::ServerContext* /*context*/, const ::zabmon::ListTemplatesRequest* /*request*/, ::zabmon::ListTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::ListTemplatesRequest,::zabmon::ListTemplatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_listItems() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::ListItemsRequest, ::zabmon::ListItemsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::ListItemsRequest, ::zabmon::ListItemsResponse>* streamer) {
                       return this->StreamedlistItems(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_listItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listItems(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsRequest* /*request*/, ::zabmon::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistItems(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::ListItemsRequest,::zabmon::ListItemsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listItemsValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_listItemsValues() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zabmon::ListItemsValuesRequest, ::zabmon::ListItemsValuesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zabmon::ListItemsValuesRequest, ::zabmon::ListItemsValuesResponse>* streamer) {
                       return this->StreamedlistItemsValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_listItemsValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listItemsValues(::grpc::ServerContext* /*context*/, const ::zabmon::ListItemsValuesRequest* /*request*/, ::zabmon::ListItemsValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistItemsValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zabmon::ListItemsValuesRequest,::zabmon::ListItemsValuesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createHost<WithStreamedUnaryMethod_createGroup<WithStreamedUnaryMethod_createTemplate<WithStreamedUnaryMethod_createItem<WithStreamedUnaryMethod_deleteHost<WithStreamedUnaryMethod_deleteGroup<WithStreamedUnaryMethod_deleteTemplate<WithStreamedUnaryMethod_deleteItem<WithStreamedUnaryMethod_updateHost<WithStreamedUnaryMethod_listHosts<WithStreamedUnaryMethod_listGroups<WithStreamedUnaryMethod_listTemplates<WithStreamedUnaryMethod_listItems<WithStreamedUnaryMethod_listItemsValues<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createHost<WithStreamedUnaryMethod_createGroup<WithStreamedUnaryMethod_createTemplate<WithStreamedUnaryMethod_createItem<WithStreamedUnaryMethod_deleteHost<WithStreamedUnaryMethod_deleteGroup<WithStreamedUnaryMethod_deleteTemplate<WithStreamedUnaryMethod_deleteItem<WithStreamedUnaryMethod_updateHost<WithStreamedUnaryMethod_listHosts<WithStreamedUnaryMethod_listGroups<WithStreamedUnaryMethod_listTemplates<WithStreamedUnaryMethod_listItems<WithStreamedUnaryMethod_listItemsValues<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace zabmon


#endif  // GRPC_zabmon_2eproto__INCLUDED
