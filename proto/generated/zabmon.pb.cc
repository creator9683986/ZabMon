// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zabmon.proto

#include "zabmon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zabmon {
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized)
  : metric_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , delay_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , interface_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)

  , value_type_(0)
{}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR ItemValues::ItemValues(
    ::_pbi::ConstantInitialized)
  : values_()
  , item_(nullptr){}
struct ItemValuesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemValuesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemValuesDefaultTypeInternal() {}
  union {
    ItemValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemValuesDefaultTypeInternal _ItemValues_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized)
  : value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_(nullptr){}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR Group::Group(
    ::_pbi::ConstantInitialized)
  : templates_ids_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupDefaultTypeInternal() {}
  union {
    Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupDefaultTypeInternal _Group_default_instance_;
PROTOBUF_CONSTEXPR Interface::Interface(
    ::_pbi::ConstantInitialized)
  : ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , dns_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , port_(0){}
struct InterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterfaceDefaultTypeInternal() {}
  union {
    Interface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterfaceDefaultTypeInternal _Interface_default_instance_;
PROTOBUF_CONSTEXPR Template::Template(
    ::_pbi::ConstantInitialized)
  : groups_ids_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateDefaultTypeInternal() {}
  union {
    Template _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateDefaultTypeInternal _Template_default_instance_;
PROTOBUF_CONSTEXPR Host::Host(
    ::_pbi::ConstantInitialized)
  : interfaces_()
  , groups_ids_()
  , templates_ids_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostDefaultTypeInternal() {}
  union {
    Host _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostDefaultTypeInternal _Host_default_instance_;
PROTOBUF_CONSTEXPR CreateHostRequest::CreateHostRequest(
    ::_pbi::ConstantInitialized)
  : host_(nullptr){}
struct CreateHostRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateHostRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateHostRequestDefaultTypeInternal() {}
  union {
    CreateHostRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateHostRequestDefaultTypeInternal _CreateHostRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateHostRequest::UpdateHostRequest(
    ::_pbi::ConstantInitialized)
  : host_(nullptr){}
struct UpdateHostRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateHostRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateHostRequestDefaultTypeInternal() {}
  union {
    UpdateHostRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateHostRequestDefaultTypeInternal _UpdateHostRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteHostRequest::DeleteHostRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DeleteHostRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteHostRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteHostRequestDefaultTypeInternal() {}
  union {
    DeleteHostRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteHostRequestDefaultTypeInternal _DeleteHostRequest_default_instance_;
PROTOBUF_CONSTEXPR ListHostsRequest::ListHostsRequest(
    ::_pbi::ConstantInitialized)
  : groups_ids_()
  , page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_size_(0){}
struct ListHostsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListHostsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListHostsRequestDefaultTypeInternal() {}
  union {
    ListHostsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListHostsRequestDefaultTypeInternal _ListHostsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListHostsResponse::ListHostsResponse(
    ::_pbi::ConstantInitialized)
  : hosts_()
  , next_page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListHostsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListHostsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListHostsResponseDefaultTypeInternal() {}
  union {
    ListHostsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListHostsResponseDefaultTypeInternal _ListHostsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListGroupsRequest::ListGroupsRequest(
    ::_pbi::ConstantInitialized)
  : page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_size_(0){}
struct ListGroupsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListGroupsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListGroupsRequestDefaultTypeInternal() {}
  union {
    ListGroupsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListGroupsRequestDefaultTypeInternal _ListGroupsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListGroupsResponse::ListGroupsResponse(
    ::_pbi::ConstantInitialized)
  : groups_()
  , next_page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListGroupsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListGroupsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListGroupsResponseDefaultTypeInternal() {}
  union {
    ListGroupsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListGroupsResponseDefaultTypeInternal _ListGroupsResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateGroupRequest::CreateGroupRequest(
    ::_pbi::ConstantInitialized)
  : group_(nullptr){}
struct CreateGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGroupRequestDefaultTypeInternal() {}
  union {
    CreateGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteGroupRequest::DeleteGroupRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , force_(false){}
struct DeleteGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteGroupRequestDefaultTypeInternal() {}
  union {
    DeleteGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteGroupRequestDefaultTypeInternal _DeleteGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateTemplateRequest::CreateTemplateRequest(
    ::_pbi::ConstantInitialized)
  : template__(nullptr){}
struct CreateTemplateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTemplateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTemplateRequestDefaultTypeInternal() {}
  union {
    CreateTemplateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTemplateRequestDefaultTypeInternal _CreateTemplateRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteTemplateRequest::DeleteTemplateRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , force_(false){}
struct DeleteTemplateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTemplateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTemplateRequestDefaultTypeInternal() {}
  union {
    DeleteTemplateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTemplateRequestDefaultTypeInternal _DeleteTemplateRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateItemRequest::CreateItemRequest(
    ::_pbi::ConstantInitialized)
  : item_(nullptr){}
struct CreateItemRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateItemRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateItemRequestDefaultTypeInternal() {}
  union {
    CreateItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateItemRequestDefaultTypeInternal _CreateItemRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteItemRequest::DeleteItemRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , force_(false){}
struct DeleteItemRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteItemRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteItemRequestDefaultTypeInternal() {}
  union {
    DeleteItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteItemRequestDefaultTypeInternal _DeleteItemRequest_default_instance_;
PROTOBUF_CONSTEXPR ListItemsValuesRequest::ListItemsValuesRequest(
    ::_pbi::ConstantInitialized)
  : items_()
  , page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , limit_(0)
  , page_size_(0){}
struct ListItemsValuesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListItemsValuesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListItemsValuesRequestDefaultTypeInternal() {}
  union {
    ListItemsValuesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListItemsValuesRequestDefaultTypeInternal _ListItemsValuesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListItemsValuesResponse::ListItemsValuesResponse(
    ::_pbi::ConstantInitialized)
  : values_()
  , next_page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListItemsValuesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListItemsValuesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListItemsValuesResponseDefaultTypeInternal() {}
  union {
    ListItemsValuesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListItemsValuesResponseDefaultTypeInternal _ListItemsValuesResponse_default_instance_;
PROTOBUF_CONSTEXPR ListItemsRequest::ListItemsRequest(
    ::_pbi::ConstantInitialized)
  : groups_ids_()
  , templates_ids_()
  , hosts_ids_()
  , page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_size_(0){}
struct ListItemsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListItemsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListItemsRequestDefaultTypeInternal() {}
  union {
    ListItemsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListItemsRequestDefaultTypeInternal _ListItemsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListItemsResponse::ListItemsResponse(
    ::_pbi::ConstantInitialized)
  : items_()
  , next_page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListItemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListItemsResponseDefaultTypeInternal() {}
  union {
    ListItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListItemsResponseDefaultTypeInternal _ListItemsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListTemplatesRequest::ListTemplatesRequest(
    ::_pbi::ConstantInitialized)
  : groups_ids_()
  , page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_size_(0){}
struct ListTemplatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTemplatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTemplatesRequestDefaultTypeInternal() {}
  union {
    ListTemplatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTemplatesRequestDefaultTypeInternal _ListTemplatesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListTemplatesResponse::ListTemplatesResponse(
    ::_pbi::ConstantInitialized)
  : templates_()
  , next_page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListTemplatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTemplatesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTemplatesResponseDefaultTypeInternal() {}
  union {
    ListTemplatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTemplatesResponseDefaultTypeInternal _ListTemplatesResponse_default_instance_;
}  // namespace zabmon
static ::_pb::Metadata file_level_metadata_zabmon_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_zabmon_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zabmon_2eproto = nullptr;

const uint32_t TableStruct_zabmon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, metric_key_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, type_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, value_type_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, delay_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, id_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, interface_id_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, name_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Item, parent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ItemValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ItemValues, values_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ItemValues, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::Value, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::Group, name_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Group, templates_ids_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Group, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::Interface, ip_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Interface, port_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Interface, dns_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Interface, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::Template, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::Template, name_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Template, groups_ids_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Template, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::Host, name_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Host, interfaces_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Host, groups_ids_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Host, templates_ids_),
  PROTOBUF_FIELD_OFFSET(::zabmon::Host, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateHostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateHostRequest, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::UpdateHostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::UpdateHostRequest, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteHostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteHostRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsRequest, groups_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsResponse, hosts_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListHostsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListGroupsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListGroupsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListGroupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListGroupsResponse, groups_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListGroupsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateGroupRequest, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteGroupRequest, force_),
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteGroupRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateTemplateRequest, template__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteTemplateRequest, force_),
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteTemplateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::CreateItemRequest, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteItemRequest, force_),
  PROTOBUF_FIELD_OFFSET(::zabmon::DeleteItemRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesRequest, items_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesResponse, values_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsValuesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsRequest, groups_ids_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsRequest, templates_ids_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsRequest, hosts_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsResponse, items_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListItemsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesRequest, groups_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesResponse, templates_),
  PROTOBUF_FIELD_OFFSET(::zabmon::ListTemplatesResponse, next_page_token_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zabmon::Item)},
  { 14, -1, -1, sizeof(::zabmon::ItemValues)},
  { 22, -1, -1, sizeof(::zabmon::Value)},
  { 30, -1, -1, sizeof(::zabmon::Group)},
  { 39, -1, -1, sizeof(::zabmon::Interface)},
  { 49, -1, -1, sizeof(::zabmon::Template)},
  { 58, -1, -1, sizeof(::zabmon::Host)},
  { 69, -1, -1, sizeof(::zabmon::CreateHostRequest)},
  { 76, -1, -1, sizeof(::zabmon::UpdateHostRequest)},
  { 83, -1, -1, sizeof(::zabmon::DeleteHostRequest)},
  { 90, -1, -1, sizeof(::zabmon::ListHostsRequest)},
  { 99, -1, -1, sizeof(::zabmon::ListHostsResponse)},
  { 107, -1, -1, sizeof(::zabmon::ListGroupsRequest)},
  { 115, -1, -1, sizeof(::zabmon::ListGroupsResponse)},
  { 123, -1, -1, sizeof(::zabmon::CreateGroupRequest)},
  { 130, -1, -1, sizeof(::zabmon::DeleteGroupRequest)},
  { 138, -1, -1, sizeof(::zabmon::CreateTemplateRequest)},
  { 145, -1, -1, sizeof(::zabmon::DeleteTemplateRequest)},
  { 153, -1, -1, sizeof(::zabmon::CreateItemRequest)},
  { 160, -1, -1, sizeof(::zabmon::DeleteItemRequest)},
  { 168, -1, -1, sizeof(::zabmon::ListItemsValuesRequest)},
  { 178, -1, -1, sizeof(::zabmon::ListItemsValuesResponse)},
  { 186, -1, -1, sizeof(::zabmon::ListItemsRequest)},
  { 197, -1, -1, sizeof(::zabmon::ListItemsResponse)},
  { 205, -1, -1, sizeof(::zabmon::ListTemplatesRequest)},
  { 214, -1, -1, sizeof(::zabmon::ListTemplatesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zabmon::_Item_default_instance_._instance,
  &::zabmon::_ItemValues_default_instance_._instance,
  &::zabmon::_Value_default_instance_._instance,
  &::zabmon::_Group_default_instance_._instance,
  &::zabmon::_Interface_default_instance_._instance,
  &::zabmon::_Template_default_instance_._instance,
  &::zabmon::_Host_default_instance_._instance,
  &::zabmon::_CreateHostRequest_default_instance_._instance,
  &::zabmon::_UpdateHostRequest_default_instance_._instance,
  &::zabmon::_DeleteHostRequest_default_instance_._instance,
  &::zabmon::_ListHostsRequest_default_instance_._instance,
  &::zabmon::_ListHostsResponse_default_instance_._instance,
  &::zabmon::_ListGroupsRequest_default_instance_._instance,
  &::zabmon::_ListGroupsResponse_default_instance_._instance,
  &::zabmon::_CreateGroupRequest_default_instance_._instance,
  &::zabmon::_DeleteGroupRequest_default_instance_._instance,
  &::zabmon::_CreateTemplateRequest_default_instance_._instance,
  &::zabmon::_DeleteTemplateRequest_default_instance_._instance,
  &::zabmon::_CreateItemRequest_default_instance_._instance,
  &::zabmon::_DeleteItemRequest_default_instance_._instance,
  &::zabmon::_ListItemsValuesRequest_default_instance_._instance,
  &::zabmon::_ListItemsValuesResponse_default_instance_._instance,
  &::zabmon::_ListItemsRequest_default_instance_._instance,
  &::zabmon::_ListItemsResponse_default_instance_._instance,
  &::zabmon::_ListTemplatesRequest_default_instance_._instance,
  &::zabmon::_ListTemplatesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_zabmon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014zabmon.proto\022\006zabmon\032\033google/protobuf/"
  "empty.proto\032\037google/protobuf/timestamp.p"
  "roto\"\263\001\n\004Item\022\022\n\nmetric_key\030\002 \001(\t\022\036\n\004typ"
  "e\030\003 \001(\0162\020.zabmon.ItemType\022%\n\nvalue_type\030"
  "\004 \001(\0162\021.zabmon.ValueType\022\r\n\005delay\030\005 \001(\t\022"
  "\n\n\002id\030\006 \001(\t\022\024\n\014interface_id\030\007 \001(\t\022\014\n\004nam"
  "e\030\010 \001(\t\022\021\n\tparent_id\030\t \001(\t\"G\n\nItemValues"
  "\022\035\n\006values\030\001 \003(\0132\r.zabmon.Value\022\032\n\004item\030"
  "\002 \001(\0132\014.zabmon.Item\"E\n\005Value\022-\n\ttimestam"
  "p\030\001 \001(\0132\032.google.protobuf.Timestamp\022\r\n\005v"
  "alue\030\006 \001(\t\"8\n\005Group\022\014\n\004name\030\001 \001(\t\022\025\n\rtem"
  "plates_ids\030\003 \003(\t\022\n\n\002id\030\004 \001(\t\">\n\tInterfac"
  "e\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\013\n\003dns\030\003 \001(\t"
  "\022\n\n\002id\030\004 \001(\t\"8\n\010Template\022\014\n\004name\030\001 \001(\t\022\022"
  "\n\ngroups_ids\030\003 \003(\t\022\n\n\002id\030\004 \001(\t\"r\n\004Host\022\014"
  "\n\004name\030\001 \001(\t\022%\n\ninterfaces\030\002 \003(\0132\021.zabmo"
  "n.Interface\022\022\n\ngroups_ids\030\005 \003(\t\022\025\n\rtempl"
  "ates_ids\030\006 \003(\t\022\n\n\002id\030\007 \001(\t\"/\n\021CreateHost"
  "Request\022\032\n\004host\030\001 \001(\0132\014.zabmon.Host\"/\n\021U"
  "pdateHostRequest\022\032\n\004host\030\001 \001(\0132\014.zabmon."
  "Host\"\037\n\021DeleteHostRequest\022\n\n\002id\030\002 \001(\t\"M\n"
  "\020ListHostsRequest\022\021\n\tpage_size\030\001 \001(\005\022\022\n\n"
  "page_token\030\002 \001(\t\022\022\n\ngroups_ids\030\004 \003(\t\"I\n\021"
  "ListHostsResponse\022\033\n\005hosts\030\001 \003(\0132\014.zabmo"
  "n.Host\022\027\n\017next_page_token\030\002 \001(\t\":\n\021ListG"
  "roupsRequest\022\021\n\tpage_size\030\001 \001(\005\022\022\n\npage_"
  "token\030\002 \001(\t\"L\n\022ListGroupsResponse\022\035\n\006gro"
  "ups\030\001 \003(\0132\r.zabmon.Group\022\027\n\017next_page_to"
  "ken\030\002 \001(\t\"2\n\022CreateGroupRequest\022\034\n\005group"
  "\030\001 \001(\0132\r.zabmon.Group\"/\n\022DeleteGroupRequ"
  "est\022\r\n\005force\030\002 \001(\010\022\n\n\002id\030\003 \001(\t\";\n\025Create"
  "TemplateRequest\022\"\n\010template\030\001 \001(\0132\020.zabm"
  "on.Template\"2\n\025DeleteTemplateRequest\022\r\n\005"
  "force\030\002 \001(\010\022\n\n\002id\030\003 \001(\t\"/\n\021CreateItemReq"
  "uest\022\032\n\004item\030\001 \001(\0132\014.zabmon.Item\".\n\021Dele"
  "teItemRequest\022\r\n\005force\030\002 \001(\010\022\n\n\002id\030\003 \001(\t"
  "\"k\n\026ListItemsValuesRequest\022\033\n\005items\030\001 \003("
  "\0132\014.zabmon.Item\022\r\n\005limit\030\002 \001(\005\022\021\n\tpage_s"
  "ize\030\003 \001(\005\022\022\n\npage_token\030\004 \001(\t\"V\n\027ListIte"
  "msValuesResponse\022\"\n\006values\030\001 \003(\0132\022.zabmo"
  "n.ItemValues\022\027\n\017next_page_token\030\002 \001(\t\"w\n"
  "\020ListItemsRequest\022\021\n\tpage_size\030\004 \001(\005\022\022\n\n"
  "page_token\030\005 \001(\t\022\022\n\ngroups_ids\030\006 \003(\t\022\025\n\r"
  "templates_ids\030\007 \003(\t\022\021\n\thosts_ids\030\010 \003(\t\"I"
  "\n\021ListItemsResponse\022\033\n\005items\030\001 \003(\0132\014.zab"
  "mon.Item\022\027\n\017next_page_token\030\002 \001(\t\"Q\n\024Lis"
  "tTemplatesRequest\022\021\n\tpage_size\030\001 \001(\005\022\022\n\n"
  "page_token\030\002 \001(\t\022\022\n\ngroups_ids\030\004 \003(\t\"U\n\025"
  "ListTemplatesResponse\022#\n\ttemplates\030\001 \003(\013"
  "2\020.zabmon.Template\022\027\n\017next_page_token\030\002 "
  "\001(\t*\245\001\n\tValueType\022\026\n\022VALUE_TYPE_INVALID\020"
  "\000\022\034\n\030VALUE_TYPE_NUMERIC_FLOAT\020\001\022\030\n\024VALUE"
  "_TYPE_CHARACTER\020\002\022\022\n\016VALUE_TYPE_LOG\020\003\022\037\n"
  "\033VALUE_TYPE_NUMERIC_UNSIGNED\020\004\022\023\n\017VALUE_"
  "TYPE_TEXT\020\005*\304\004\n\010ItemType\022\025\n\021ITEM_TYPE_IN"
  "VALID\020\000\022\032\n\026ITEM_TYPE_ZABBIX_AGENT\020\001\022\032\n\026I"
  "TEM_TYPE_SNMPV1_AGENT\020\002\022\025\n\021ITEM_TYPE_TRA"
  "PPER\020\003\022\032\n\026ITEM_TYPE_SIMPLE_CHECK\020\004\022\032\n\026IT"
  "EM_TYPE_SNMPV2_AGENT\020\005\022\026\n\022ITEM_TYPE_INTE"
  "RNAL\020\006\022\032\n\026ITEM_TYPE_SNMPV3_AGENT\020\007\022!\n\035IT"
  "EM_TYPE_ZABBIX_AGENT_ACTIVE\020\010\022\027\n\023ITEM_TY"
  "PE_AGGREGATE\020\t\022\031\n\025ITEM_TYPE_WEB_ELEMENT\020"
  "\n\022\034\n\030ITEM_TYPE_EXTERNAL_CHECK\020\013\022\036\n\032ITEM_"
  "TYPE_DATABASE_MONITOR\020\014\022\030\n\024ITEM_TYPE_IPM"
  "I_AGENT\020\r\022\027\n\023ITEM_TYPE_SSH_AGENT\020\016\022\032\n\026IT"
  "EM_TYPE_TELNET_AGENT\020\017\022\030\n\024ITEM_TYPE_CALC"
  "ULATED\020\020\022\027\n\023ITEM_TYPE_JMX_AGENT\020\021\022\027\n\023ITE"
  "M_TYPE_SNMP_TRAP\020\022\022\034\n\030ITEM_TYPE_DEPENDEN"
  "T_ITEM\020\023\022\030\n\024ITEM_TYPE_HTTP_AGENT\020\0242\252\007\n\rZ"
  "abMonService\0225\n\ncreateHost\022\031.zabmon.Crea"
  "teHostRequest\032\014.zabmon.Host\0228\n\013createGro"
  "up\022\032.zabmon.CreateGroupRequest\032\r.zabmon."
  "Group\022A\n\016createTemplate\022\035.zabmon.CreateT"
  "emplateRequest\032\020.zabmon.Template\0225\n\ncrea"
  "teItem\022\031.zabmon.CreateItemRequest\032\014.zabm"
  "on.Item\022\?\n\ndeleteHost\022\031.zabmon.DeleteHos"
  "tRequest\032\026.google.protobuf.Empty\022A\n\013dele"
  "teGroup\022\032.zabmon.DeleteGroupRequest\032\026.go"
  "ogle.protobuf.Empty\022G\n\016deleteTemplate\022\035."
  "zabmon.DeleteTemplateRequest\032\026.google.pr"
  "otobuf.Empty\022\?\n\ndeleteItem\022\031.zabmon.Dele"
  "teItemRequest\032\026.google.protobuf.Empty\0225\n"
  "\nupdateHost\022\031.zabmon.UpdateHostRequest\032\014"
  ".zabmon.Host\022@\n\tlistHosts\022\030.zabmon.ListH"
  "ostsRequest\032\031.zabmon.ListHostsResponse\022C"
  "\n\nlistGroups\022\031.zabmon.ListGroupsRequest\032"
  "\032.zabmon.ListGroupsResponse\022L\n\rlistTempl"
  "ates\022\034.zabmon.ListTemplatesRequest\032\035.zab"
  "mon.ListTemplatesResponse\022@\n\tlistItems\022\030"
  ".zabmon.ListItemsRequest\032\031.zabmon.ListIt"
  "emsResponse\022R\n\017listItemsValues\022\036.zabmon."
  "ListItemsValuesRequest\032\037.zabmon.ListItem"
  "sValuesResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zabmon_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_zabmon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zabmon_2eproto = {
    false, false, 3703, descriptor_table_protodef_zabmon_2eproto,
    "zabmon.proto",
    &descriptor_table_zabmon_2eproto_once, descriptor_table_zabmon_2eproto_deps, 2, 26,
    schemas, file_default_instances, TableStruct_zabmon_2eproto::offsets,
    file_level_metadata_zabmon_2eproto, file_level_enum_descriptors_zabmon_2eproto,
    file_level_service_descriptors_zabmon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zabmon_2eproto_getter() {
  return &descriptor_table_zabmon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zabmon_2eproto(&descriptor_table_zabmon_2eproto);
namespace zabmon {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zabmon_2eproto);
  return file_level_enum_descriptors_zabmon_2eproto[0];
}
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zabmon_2eproto);
  return file_level_enum_descriptors_zabmon_2eproto[1];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metric_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric_key().empty()) {
    metric_key_.Set(from._internal_metric_key(), 
      GetArenaForAllocation());
  }
  delay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    delay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delay().empty()) {
    delay_.Set(from._internal_delay(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_id().empty()) {
    interface_id_.Set(from._internal_interface_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  parent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_id().empty()) {
    parent_id_.Set(from._internal_parent_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
  // @@protoc_insertion_point(copy_constructor:zabmon.Item)
}

inline void Item::SharedCtor() {
metric_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metric_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
delay_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  delay_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
interface_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  interface_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:zabmon.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_key_.Destroy();
  delay_.Destroy();
  id_.Destroy();
  interface_id_.Destroy();
  name_.Destroy();
  parent_id_.Destroy();
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_key_.ClearToEmpty();
  delay_.ClearToEmpty();
  id_.ClearToEmpty();
  interface_id_.ClearToEmpty();
  name_.ClearToEmpty();
  parent_id_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metric_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metric_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Item.metric_key"));
        } else
          goto handle_unusual;
        continue;
      // .zabmon.ItemType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zabmon::ItemType>(val));
        } else
          goto handle_unusual;
        continue;
      // .zabmon.ValueType value_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::zabmon::ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // string delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_delay();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Item.delay"));
        } else
          goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Item.id"));
        } else
          goto handle_unusual;
        continue;
      // string interface_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Item.interface_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Item.name"));
        } else
          goto handle_unusual;
        continue;
      // string parent_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Item.parent_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_key = 2;
  if (!this->_internal_metric_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_key().data(), static_cast<int>(this->_internal_metric_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Item.metric_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metric_key(), target);
  }

  // .zabmon.ItemType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .zabmon.ValueType value_type = 4;
  if (this->_internal_value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_value_type(), target);
  }

  // string delay = 5;
  if (!this->_internal_delay().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delay().data(), static_cast<int>(this->_internal_delay().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Item.delay");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_delay(), target);
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Item.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // string interface_id = 7;
  if (!this->_internal_interface_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_id().data(), static_cast<int>(this->_internal_interface_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Item.interface_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_interface_id(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Item.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string parent_id = 9;
  if (!this->_internal_parent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_id().data(), static_cast<int>(this->_internal_parent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Item.parent_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_parent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metric_key = 2;
  if (!this->_internal_metric_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_key());
  }

  // string delay = 5;
  if (!this->_internal_delay().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delay());
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string interface_id = 7;
  if (!this->_internal_interface_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_id());
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string parent_id = 9;
  if (!this->_internal_parent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_id());
  }

  // .zabmon.ItemType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .zabmon.ValueType value_type = 4;
  if (this->_internal_value_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }

void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Item *>(to)->MergeFrom(
      static_cast<const Item &>(from));
}


void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metric_key().empty()) {
    _internal_set_metric_key(from._internal_metric_key());
  }
  if (!from._internal_delay().empty()) {
    _internal_set_delay(from._internal_delay());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_interface_id().empty()) {
    _internal_set_interface_id(from._internal_interface_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_parent_id().empty()) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &metric_key_, lhs_arena,
      &other->metric_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &delay_, lhs_arena,
      &other->delay_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &interface_id_, lhs_arena,
      &other->interface_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_id_, lhs_arena,
      &other->parent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, value_type_)
      + sizeof(Item::value_type_)
      - PROTOBUF_FIELD_OFFSET(Item, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[0]);
}

// ===================================================================

class ItemValues::_Internal {
 public:
  static const ::zabmon::Item& item(const ItemValues* msg);
};

const ::zabmon::Item&
ItemValues::_Internal::item(const ItemValues* msg) {
  return *msg->item_;
}
ItemValues::ItemValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ItemValues)
}
ItemValues::ItemValues(const ItemValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::zabmon::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.ItemValues)
}

inline void ItemValues::SharedCtor() {
item_ = nullptr;
}

ItemValues::~ItemValues() {
  // @@protoc_insertion_point(destructor:zabmon.ItemValues)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void ItemValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemValues::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ItemValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemValues::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.Value values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .zabmon.Item item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ItemValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.Value values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .zabmon.Item item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ItemValues)
  return target;
}

size_t ItemValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ItemValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Value values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zabmon.Item item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemValues::GetClassData() const { return &_class_data_; }

void ItemValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemValues *>(to)->MergeFrom(
      static_cast<const ItemValues &>(from));
}


void ItemValues::MergeFrom(const ItemValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ItemValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_item()) {
    _internal_mutable_item()->::zabmon::Item::MergeFrom(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemValues::CopyFrom(const ItemValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ItemValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemValues::IsInitialized() const {
  return true;
}

void ItemValues::InternalSwap(ItemValues* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemValues::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[1]);
}

// ===================================================================

class Value::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Value* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Value::_Internal::timestamp(const Value* msg) {
  return *msg->timestamp_;
}
void Value::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.Value)
}

inline void Value::SharedCtor() {
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = nullptr;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:zabmon.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.Destroy();
  if (this != internal_default_instance()) delete timestamp_;
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Value.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Value.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 6;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }

void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Value *>(to)->MergeFrom(
      static_cast<const Value &>(from));
}


void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.Value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[2]);
}

// ===================================================================

class Group::_Internal {
 public:
};

Group::Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  templates_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.Group)
}
Group::Group(const Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      templates_ids_(from.templates_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.Group)
}

inline void Group::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:zabmon.Group)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  id_.Destroy();
}

void Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.Group)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_ids_.Clear();
  name_.ClearToEmpty();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Group::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Group.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string templates_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templates_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.Group.templates_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Group.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Group::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.Group)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Group.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string templates_ids = 3;
  for (int i = 0, n = this->_internal_templates_ids_size(); i < n; i++) {
    const auto& s = this->_internal_templates_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Group.templates_ids");
    target = stream->WriteString(3, s, target);
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Group.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.Group)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string templates_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templates_ids_.size());
  for (int i = 0, n = templates_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templates_ids_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Group::GetClassData() const { return &_class_data_; }

void Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Group *>(to)->MergeFrom(
      static_cast<const Group &>(from));
}


void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.Group)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  templates_ids_.MergeFrom(from.templates_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  return true;
}

void Group::InternalSwap(Group* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  templates_ids_.InternalSwap(&other->templates_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Group::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[3]);
}

// ===================================================================

class Interface::_Internal {
 public:
};

Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dns().empty()) {
    dns_.Set(from._internal_dns(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:zabmon.Interface)
}

inline void Interface::SharedCtor() {
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dns_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dns_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = 0;
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:zabmon.Interface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.Destroy();
  dns_.Destroy();
  id_.Destroy();
}

void Interface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.Interface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  dns_.ClearToEmpty();
  id_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Interface.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dns();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Interface.dns"));
        } else
          goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Interface.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.Interface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Interface.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // string dns = 3;
  if (!this->_internal_dns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns().data(), static_cast<int>(this->_internal_dns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Interface.dns");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dns(), target);
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Interface.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.Interface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string dns = 3;
  if (!this->_internal_dns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns());
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface::GetClassData() const { return &_class_data_; }

void Interface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface *>(to)->MergeFrom(
      static_cast<const Interface &>(from));
}


void Interface::MergeFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_dns().empty()) {
    _internal_set_dns(from._internal_dns());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dns_, lhs_arena,
      &other->dns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[4]);
}

// ===================================================================

class Template::_Internal {
 public:
};

Template::Template(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.Template)
}
Template::Template(const Template& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_ids_(from.groups_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.Template)
}

inline void Template::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Template::~Template() {
  // @@protoc_insertion_point(destructor:zabmon.Template)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Template::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  id_.Destroy();
}

void Template::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Template::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.Template)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_ids_.Clear();
  name_.ClearToEmpty();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Template::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Template.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string groups_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.Template.groups_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Template.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Template::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.Template)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Template.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string groups_ids = 3;
  for (int i = 0, n = this->_internal_groups_ids_size(); i < n; i++) {
    const auto& s = this->_internal_groups_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Template.groups_ids");
    target = stream->WriteString(3, s, target);
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Template.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.Template)
  return target;
}

size_t Template::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.Template)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groups_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_ids_.size());
  for (int i = 0, n = groups_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_ids_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Template::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Template::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Template::GetClassData() const { return &_class_data_; }

void Template::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Template *>(to)->MergeFrom(
      static_cast<const Template &>(from));
}


void Template::MergeFrom(const Template& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.Template)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_ids_.MergeFrom(from.groups_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Template::CopyFrom(const Template& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.Template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Template::IsInitialized() const {
  return true;
}

void Template::InternalSwap(Template* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_ids_.InternalSwap(&other->groups_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Template::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[5]);
}

// ===================================================================

class Host::_Internal {
 public:
};

Host::Host(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interfaces_(arena),
  groups_ids_(arena),
  templates_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.Host)
}
Host::Host(const Host& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_),
      groups_ids_(from.groups_ids_),
      templates_ids_(from.templates_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.Host)
}

inline void Host::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:zabmon.Host)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Host::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  id_.Destroy();
}

void Host::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.Host)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  groups_ids_.Clear();
  templates_ids_.Clear();
  name_.ClearToEmpty();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Host::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Host.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .zabmon.Interface interfaces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string groups_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.Host.groups_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string templates_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templates_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.Host.templates_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.Host.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Host::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.Host)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Host.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .zabmon.Interface interfaces = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string groups_ids = 5;
  for (int i = 0, n = this->_internal_groups_ids_size(); i < n; i++) {
    const auto& s = this->_internal_groups_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Host.groups_ids");
    target = stream->WriteString(5, s, target);
  }

  // repeated string templates_ids = 6;
  for (int i = 0, n = this->_internal_templates_ids_size(); i < n; i++) {
    const auto& s = this->_internal_templates_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Host.templates_ids");
    target = stream->WriteString(6, s, target);
  }

  // string id = 7;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.Host.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.Host)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Interface interfaces = 2;
  total_size += 1UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string groups_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_ids_.size());
  for (int i = 0, n = groups_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_ids_.Get(i));
  }

  // repeated string templates_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templates_ids_.size());
  for (int i = 0, n = templates_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templates_ids_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 7;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Host::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Host::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Host::GetClassData() const { return &_class_data_; }

void Host::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Host *>(to)->MergeFrom(
      static_cast<const Host &>(from));
}


void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.Host)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  groups_ids_.MergeFrom(from.groups_ids_);
  templates_ids_.MergeFrom(from.templates_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::InternalSwap(Host* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
  groups_ids_.InternalSwap(&other->groups_ids_);
  templates_ids_.InternalSwap(&other->templates_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Host::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[6]);
}

// ===================================================================

class CreateHostRequest::_Internal {
 public:
  static const ::zabmon::Host& host(const CreateHostRequest* msg);
};

const ::zabmon::Host&
CreateHostRequest::_Internal::host(const CreateHostRequest* msg) {
  return *msg->host_;
}
CreateHostRequest::CreateHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.CreateHostRequest)
}
CreateHostRequest::CreateHostRequest(const CreateHostRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_host()) {
    host_ = new ::zabmon::Host(*from.host_);
  } else {
    host_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.CreateHostRequest)
}

inline void CreateHostRequest::SharedCtor() {
host_ = nullptr;
}

CreateHostRequest::~CreateHostRequest() {
  // @@protoc_insertion_point(destructor:zabmon.CreateHostRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateHostRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete host_;
}

void CreateHostRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateHostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.CreateHostRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateHostRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .zabmon.Host host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateHostRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.CreateHostRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .zabmon.Host host = 1;
  if (this->_internal_has_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::host(this),
        _Internal::host(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.CreateHostRequest)
  return target;
}

size_t CreateHostRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.CreateHostRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zabmon.Host host = 1;
  if (this->_internal_has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateHostRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateHostRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateHostRequest::GetClassData() const { return &_class_data_; }

void CreateHostRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateHostRequest *>(to)->MergeFrom(
      static_cast<const CreateHostRequest &>(from));
}


void CreateHostRequest::MergeFrom(const CreateHostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.CreateHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_host()) {
    _internal_mutable_host()->::zabmon::Host::MergeFrom(from._internal_host());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateHostRequest::CopyFrom(const CreateHostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.CreateHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateHostRequest::IsInitialized() const {
  return true;
}

void CreateHostRequest::InternalSwap(CreateHostRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(host_, other->host_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateHostRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[7]);
}

// ===================================================================

class UpdateHostRequest::_Internal {
 public:
  static const ::zabmon::Host& host(const UpdateHostRequest* msg);
};

const ::zabmon::Host&
UpdateHostRequest::_Internal::host(const UpdateHostRequest* msg) {
  return *msg->host_;
}
UpdateHostRequest::UpdateHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.UpdateHostRequest)
}
UpdateHostRequest::UpdateHostRequest(const UpdateHostRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_host()) {
    host_ = new ::zabmon::Host(*from.host_);
  } else {
    host_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.UpdateHostRequest)
}

inline void UpdateHostRequest::SharedCtor() {
host_ = nullptr;
}

UpdateHostRequest::~UpdateHostRequest() {
  // @@protoc_insertion_point(destructor:zabmon.UpdateHostRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateHostRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete host_;
}

void UpdateHostRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateHostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.UpdateHostRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateHostRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .zabmon.Host host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateHostRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.UpdateHostRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .zabmon.Host host = 1;
  if (this->_internal_has_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::host(this),
        _Internal::host(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.UpdateHostRequest)
  return target;
}

size_t UpdateHostRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.UpdateHostRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zabmon.Host host = 1;
  if (this->_internal_has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateHostRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateHostRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateHostRequest::GetClassData() const { return &_class_data_; }

void UpdateHostRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateHostRequest *>(to)->MergeFrom(
      static_cast<const UpdateHostRequest &>(from));
}


void UpdateHostRequest::MergeFrom(const UpdateHostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.UpdateHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_host()) {
    _internal_mutable_host()->::zabmon::Host::MergeFrom(from._internal_host());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateHostRequest::CopyFrom(const UpdateHostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.UpdateHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHostRequest::IsInitialized() const {
  return true;
}

void UpdateHostRequest::InternalSwap(UpdateHostRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(host_, other->host_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateHostRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[8]);
}

// ===================================================================

class DeleteHostRequest::_Internal {
 public:
};

DeleteHostRequest::DeleteHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.DeleteHostRequest)
}
DeleteHostRequest::DeleteHostRequest(const DeleteHostRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.DeleteHostRequest)
}

inline void DeleteHostRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteHostRequest::~DeleteHostRequest() {
  // @@protoc_insertion_point(destructor:zabmon.DeleteHostRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteHostRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void DeleteHostRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteHostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.DeleteHostRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteHostRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.DeleteHostRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteHostRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.DeleteHostRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.DeleteHostRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.DeleteHostRequest)
  return target;
}

size_t DeleteHostRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.DeleteHostRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteHostRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteHostRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteHostRequest::GetClassData() const { return &_class_data_; }

void DeleteHostRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteHostRequest *>(to)->MergeFrom(
      static_cast<const DeleteHostRequest &>(from));
}


void DeleteHostRequest::MergeFrom(const DeleteHostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.DeleteHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteHostRequest::CopyFrom(const DeleteHostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.DeleteHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteHostRequest::IsInitialized() const {
  return true;
}

void DeleteHostRequest::InternalSwap(DeleteHostRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteHostRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[9]);
}

// ===================================================================

class ListHostsRequest::_Internal {
 public:
};

ListHostsRequest::ListHostsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListHostsRequest)
}
ListHostsRequest::ListHostsRequest(const ListHostsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_ids_(from.groups_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:zabmon.ListHostsRequest)
}

inline void ListHostsRequest::SharedCtor() {
page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListHostsRequest::~ListHostsRequest() {
  // @@protoc_insertion_point(destructor:zabmon.ListHostsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListHostsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.Destroy();
}

void ListHostsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListHostsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListHostsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_ids_.Clear();
  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListHostsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListHostsRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      // repeated string groups_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListHostsRequest.groups_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListHostsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListHostsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListHostsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  // repeated string groups_ids = 4;
  for (int i = 0, n = this->_internal_groups_ids_size(); i < n; i++) {
    const auto& s = this->_internal_groups_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListHostsRequest.groups_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListHostsRequest)
  return target;
}

size_t ListHostsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListHostsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groups_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_ids_.size());
  for (int i = 0, n = groups_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_ids_.Get(i));
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListHostsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListHostsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListHostsRequest::GetClassData() const { return &_class_data_; }

void ListHostsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListHostsRequest *>(to)->MergeFrom(
      static_cast<const ListHostsRequest &>(from));
}


void ListHostsRequest::MergeFrom(const ListHostsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListHostsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_ids_.MergeFrom(from.groups_ids_);
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListHostsRequest::CopyFrom(const ListHostsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListHostsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListHostsRequest::IsInitialized() const {
  return true;
}

void ListHostsRequest::InternalSwap(ListHostsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_ids_.InternalSwap(&other->groups_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListHostsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[10]);
}

// ===================================================================

class ListHostsResponse::_Internal {
 public:
};

ListHostsResponse::ListHostsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hosts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListHostsResponse)
}
ListHostsResponse::ListHostsResponse(const ListHostsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hosts_(from.hosts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.ListHostsResponse)
}

inline void ListHostsResponse::SharedCtor() {
next_page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListHostsResponse::~ListHostsResponse() {
  // @@protoc_insertion_point(destructor:zabmon.ListHostsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListHostsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.Destroy();
}

void ListHostsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListHostsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListHostsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListHostsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.Host hosts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListHostsResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListHostsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListHostsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.Host hosts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hosts_size()); i < n; i++) {
    const auto& repfield = this->_internal_hosts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListHostsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListHostsResponse)
  return target;
}

size_t ListHostsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListHostsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Host hosts = 1;
  total_size += 1UL * this->_internal_hosts_size();
  for (const auto& msg : this->hosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListHostsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListHostsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListHostsResponse::GetClassData() const { return &_class_data_; }

void ListHostsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListHostsResponse *>(to)->MergeFrom(
      static_cast<const ListHostsResponse &>(from));
}


void ListHostsResponse::MergeFrom(const ListHostsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListHostsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListHostsResponse::CopyFrom(const ListHostsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListHostsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListHostsResponse::IsInitialized() const {
  return true;
}

void ListHostsResponse::InternalSwap(ListHostsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hosts_.InternalSwap(&other->hosts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListHostsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[11]);
}

// ===================================================================

class ListGroupsRequest::_Internal {
 public:
};

ListGroupsRequest::ListGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListGroupsRequest)
}
ListGroupsRequest::ListGroupsRequest(const ListGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:zabmon.ListGroupsRequest)
}

inline void ListGroupsRequest::SharedCtor() {
page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListGroupsRequest::~ListGroupsRequest() {
  // @@protoc_insertion_point(destructor:zabmon.ListGroupsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.Destroy();
}

void ListGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListGroupsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListGroupsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListGroupsRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListGroupsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListGroupsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListGroupsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListGroupsRequest)
  return target;
}

size_t ListGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListGroupsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListGroupsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListGroupsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListGroupsRequest::GetClassData() const { return &_class_data_; }

void ListGroupsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListGroupsRequest *>(to)->MergeFrom(
      static_cast<const ListGroupsRequest &>(from));
}


void ListGroupsRequest::MergeFrom(const ListGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListGroupsRequest::CopyFrom(const ListGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGroupsRequest::IsInitialized() const {
  return true;
}

void ListGroupsRequest::InternalSwap(ListGroupsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListGroupsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[12]);
}

// ===================================================================

class ListGroupsResponse::_Internal {
 public:
};

ListGroupsResponse::ListGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListGroupsResponse)
}
ListGroupsResponse::ListGroupsResponse(const ListGroupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.ListGroupsResponse)
}

inline void ListGroupsResponse::SharedCtor() {
next_page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListGroupsResponse::~ListGroupsResponse() {
  // @@protoc_insertion_point(destructor:zabmon.ListGroupsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListGroupsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.Destroy();
}

void ListGroupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListGroupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListGroupsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListGroupsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.Group groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListGroupsResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListGroupsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListGroupsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.Group groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListGroupsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListGroupsResponse)
  return target;
}

size_t ListGroupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListGroupsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Group groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListGroupsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListGroupsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListGroupsResponse::GetClassData() const { return &_class_data_; }

void ListGroupsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListGroupsResponse *>(to)->MergeFrom(
      static_cast<const ListGroupsResponse &>(from));
}


void ListGroupsResponse::MergeFrom(const ListGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListGroupsResponse::CopyFrom(const ListGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGroupsResponse::IsInitialized() const {
  return true;
}

void ListGroupsResponse::InternalSwap(ListGroupsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListGroupsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[13]);
}

// ===================================================================

class CreateGroupRequest::_Internal {
 public:
  static const ::zabmon::Group& group(const CreateGroupRequest* msg);
};

const ::zabmon::Group&
CreateGroupRequest::_Internal::group(const CreateGroupRequest* msg) {
  return *msg->group_;
}
CreateGroupRequest::CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.CreateGroupRequest)
}
CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::zabmon::Group(*from.group_);
  } else {
    group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.CreateGroupRequest)
}

inline void CreateGroupRequest::SharedCtor() {
group_ = nullptr;
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:zabmon.CreateGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_;
}

void CreateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.CreateGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .zabmon.Group group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.CreateGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .zabmon.Group group = 1;
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.CreateGroupRequest)
  return target;
}

size_t CreateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.CreateGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zabmon.Group group = 1;
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGroupRequest::GetClassData() const { return &_class_data_; }

void CreateGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateGroupRequest *>(to)->MergeFrom(
      static_cast<const CreateGroupRequest &>(from));
}


void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group()) {
    _internal_mutable_group()->::zabmon::Group::MergeFrom(from._internal_group());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  return true;
}

void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[14]);
}

// ===================================================================

class DeleteGroupRequest::_Internal {
 public:
};

DeleteGroupRequest::DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.DeleteGroupRequest)
}
DeleteGroupRequest::DeleteGroupRequest(const DeleteGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:zabmon.DeleteGroupRequest)
}

inline void DeleteGroupRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
force_ = false;
}

DeleteGroupRequest::~DeleteGroupRequest() {
  // @@protoc_insertion_point(destructor:zabmon.DeleteGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void DeleteGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.DeleteGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.DeleteGroupRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.DeleteGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.DeleteGroupRequest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.DeleteGroupRequest)
  return target;
}

size_t DeleteGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.DeleteGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteGroupRequest::GetClassData() const { return &_class_data_; }

void DeleteGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteGroupRequest *>(to)->MergeFrom(
      static_cast<const DeleteGroupRequest &>(from));
}


void DeleteGroupRequest::MergeFrom(const DeleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.DeleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_force() != 0) {
    _internal_set_force(from._internal_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteGroupRequest::CopyFrom(const DeleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.DeleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupRequest::IsInitialized() const {
  return true;
}

void DeleteGroupRequest::InternalSwap(DeleteGroupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[15]);
}

// ===================================================================

class CreateTemplateRequest::_Internal {
 public:
  static const ::zabmon::Template& template_(const CreateTemplateRequest* msg);
};

const ::zabmon::Template&
CreateTemplateRequest::_Internal::template_(const CreateTemplateRequest* msg) {
  return *msg->template__;
}
CreateTemplateRequest::CreateTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.CreateTemplateRequest)
}
CreateTemplateRequest::CreateTemplateRequest(const CreateTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_template_()) {
    template__ = new ::zabmon::Template(*from.template__);
  } else {
    template__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.CreateTemplateRequest)
}

inline void CreateTemplateRequest::SharedCtor() {
template__ = nullptr;
}

CreateTemplateRequest::~CreateTemplateRequest() {
  // @@protoc_insertion_point(destructor:zabmon.CreateTemplateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete template__;
}

void CreateTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.CreateTemplateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTemplateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .zabmon.Template template = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTemplateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.CreateTemplateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .zabmon.Template template = 1;
  if (this->_internal_has_template_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::template_(this),
        _Internal::template_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.CreateTemplateRequest)
  return target;
}

size_t CreateTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.CreateTemplateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zabmon.Template template = 1;
  if (this->_internal_has_template_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTemplateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTemplateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTemplateRequest::GetClassData() const { return &_class_data_; }

void CreateTemplateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateTemplateRequest *>(to)->MergeFrom(
      static_cast<const CreateTemplateRequest &>(from));
}


void CreateTemplateRequest::MergeFrom(const CreateTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.CreateTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_template_()) {
    _internal_mutable_template_()->::zabmon::Template::MergeFrom(from._internal_template_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTemplateRequest::CopyFrom(const CreateTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.CreateTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTemplateRequest::IsInitialized() const {
  return true;
}

void CreateTemplateRequest::InternalSwap(CreateTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(template__, other->template__);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTemplateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[16]);
}

// ===================================================================

class DeleteTemplateRequest::_Internal {
 public:
};

DeleteTemplateRequest::DeleteTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.DeleteTemplateRequest)
}
DeleteTemplateRequest::DeleteTemplateRequest(const DeleteTemplateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:zabmon.DeleteTemplateRequest)
}

inline void DeleteTemplateRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
force_ = false;
}

DeleteTemplateRequest::~DeleteTemplateRequest() {
  // @@protoc_insertion_point(destructor:zabmon.DeleteTemplateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteTemplateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void DeleteTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.DeleteTemplateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTemplateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.DeleteTemplateRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteTemplateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.DeleteTemplateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.DeleteTemplateRequest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.DeleteTemplateRequest)
  return target;
}

size_t DeleteTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.DeleteTemplateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTemplateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTemplateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTemplateRequest::GetClassData() const { return &_class_data_; }

void DeleteTemplateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteTemplateRequest *>(to)->MergeFrom(
      static_cast<const DeleteTemplateRequest &>(from));
}


void DeleteTemplateRequest::MergeFrom(const DeleteTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.DeleteTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_force() != 0) {
    _internal_set_force(from._internal_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTemplateRequest::CopyFrom(const DeleteTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.DeleteTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTemplateRequest::IsInitialized() const {
  return true;
}

void DeleteTemplateRequest::InternalSwap(DeleteTemplateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTemplateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[17]);
}

// ===================================================================

class CreateItemRequest::_Internal {
 public:
  static const ::zabmon::Item& item(const CreateItemRequest* msg);
};

const ::zabmon::Item&
CreateItemRequest::_Internal::item(const CreateItemRequest* msg) {
  return *msg->item_;
}
CreateItemRequest::CreateItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.CreateItemRequest)
}
CreateItemRequest::CreateItemRequest(const CreateItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::zabmon::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.CreateItemRequest)
}

inline void CreateItemRequest::SharedCtor() {
item_ = nullptr;
}

CreateItemRequest::~CreateItemRequest() {
  // @@protoc_insertion_point(destructor:zabmon.CreateItemRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void CreateItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.CreateItemRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateItemRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .zabmon.Item item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateItemRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.CreateItemRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .zabmon.Item item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.CreateItemRequest)
  return target;
}

size_t CreateItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.CreateItemRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zabmon.Item item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateItemRequest::GetClassData() const { return &_class_data_; }

void CreateItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateItemRequest *>(to)->MergeFrom(
      static_cast<const CreateItemRequest &>(from));
}


void CreateItemRequest::MergeFrom(const CreateItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.CreateItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _internal_mutable_item()->::zabmon::Item::MergeFrom(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateItemRequest::CopyFrom(const CreateItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.CreateItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateItemRequest::IsInitialized() const {
  return true;
}

void CreateItemRequest::InternalSwap(CreateItemRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateItemRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[18]);
}

// ===================================================================

class DeleteItemRequest::_Internal {
 public:
};

DeleteItemRequest::DeleteItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.DeleteItemRequest)
}
DeleteItemRequest::DeleteItemRequest(const DeleteItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:zabmon.DeleteItemRequest)
}

inline void DeleteItemRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
force_ = false;
}

DeleteItemRequest::~DeleteItemRequest() {
  // @@protoc_insertion_point(destructor:zabmon.DeleteItemRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void DeleteItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.DeleteItemRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteItemRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.DeleteItemRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteItemRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.DeleteItemRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.DeleteItemRequest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.DeleteItemRequest)
  return target;
}

size_t DeleteItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.DeleteItemRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteItemRequest::GetClassData() const { return &_class_data_; }

void DeleteItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteItemRequest *>(to)->MergeFrom(
      static_cast<const DeleteItemRequest &>(from));
}


void DeleteItemRequest::MergeFrom(const DeleteItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.DeleteItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_force() != 0) {
    _internal_set_force(from._internal_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteItemRequest::CopyFrom(const DeleteItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.DeleteItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteItemRequest::IsInitialized() const {
  return true;
}

void DeleteItemRequest::InternalSwap(DeleteItemRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteItemRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[19]);
}

// ===================================================================

class ListItemsValuesRequest::_Internal {
 public:
};

ListItemsValuesRequest::ListItemsValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListItemsValuesRequest)
}
ListItemsValuesRequest::ListItemsValuesRequest(const ListItemsValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(from._internal_page_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:zabmon.ListItemsValuesRequest)
}

inline void ListItemsValuesRequest::SharedCtor() {
page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(page_size_));
}

ListItemsValuesRequest::~ListItemsValuesRequest() {
  // @@protoc_insertion_point(destructor:zabmon.ListItemsValuesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListItemsValuesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.Destroy();
}

void ListItemsValuesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListItemsValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListItemsValuesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  page_token_.ClearToEmpty();
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListItemsValuesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsValuesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListItemsValuesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListItemsValuesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_size(), target);
  }

  // string page_token = 4;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsValuesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListItemsValuesRequest)
  return target;
}

size_t ListItemsValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListItemsValuesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string page_token = 4;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListItemsValuesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListItemsValuesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListItemsValuesRequest::GetClassData() const { return &_class_data_; }

void ListItemsValuesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListItemsValuesRequest *>(to)->MergeFrom(
      static_cast<const ListItemsValuesRequest &>(from));
}


void ListItemsValuesRequest::MergeFrom(const ListItemsValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListItemsValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListItemsValuesRequest::CopyFrom(const ListItemsValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListItemsValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItemsValuesRequest::IsInitialized() const {
  return true;
}

void ListItemsValuesRequest::InternalSwap(ListItemsValuesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListItemsValuesRequest, page_size_)
      + sizeof(ListItemsValuesRequest::page_size_)
      - PROTOBUF_FIELD_OFFSET(ListItemsValuesRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListItemsValuesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[20]);
}

// ===================================================================

class ListItemsValuesResponse::_Internal {
 public:
};

ListItemsValuesResponse::ListItemsValuesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListItemsValuesResponse)
}
ListItemsValuesResponse::ListItemsValuesResponse(const ListItemsValuesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.ListItemsValuesResponse)
}

inline void ListItemsValuesResponse::SharedCtor() {
next_page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListItemsValuesResponse::~ListItemsValuesResponse() {
  // @@protoc_insertion_point(destructor:zabmon.ListItemsValuesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListItemsValuesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.Destroy();
}

void ListItemsValuesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListItemsValuesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListItemsValuesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListItemsValuesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.ItemValues values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsValuesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListItemsValuesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListItemsValuesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.ItemValues values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsValuesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListItemsValuesResponse)
  return target;
}

size_t ListItemsValuesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListItemsValuesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.ItemValues values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListItemsValuesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListItemsValuesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListItemsValuesResponse::GetClassData() const { return &_class_data_; }

void ListItemsValuesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListItemsValuesResponse *>(to)->MergeFrom(
      static_cast<const ListItemsValuesResponse &>(from));
}


void ListItemsValuesResponse::MergeFrom(const ListItemsValuesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListItemsValuesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListItemsValuesResponse::CopyFrom(const ListItemsValuesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListItemsValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItemsValuesResponse::IsInitialized() const {
  return true;
}

void ListItemsValuesResponse::InternalSwap(ListItemsValuesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListItemsValuesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[21]);
}

// ===================================================================

class ListItemsRequest::_Internal {
 public:
};

ListItemsRequest::ListItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_ids_(arena),
  templates_ids_(arena),
  hosts_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListItemsRequest)
}
ListItemsRequest::ListItemsRequest(const ListItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_ids_(from.groups_ids_),
      templates_ids_(from.templates_ids_),
      hosts_ids_(from.hosts_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:zabmon.ListItemsRequest)
}

inline void ListItemsRequest::SharedCtor() {
page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListItemsRequest::~ListItemsRequest() {
  // @@protoc_insertion_point(destructor:zabmon.ListItemsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.Destroy();
}

void ListItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListItemsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_ids_.Clear();
  templates_ids_.Clear();
  hosts_ids_.Clear();
  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListItemsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      // repeated string groups_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsRequest.groups_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string templates_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templates_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsRequest.templates_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string hosts_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hosts_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsRequest.hosts_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListItemsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListItemsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_page_size(), target);
  }

  // string page_token = 5;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_page_token(), target);
  }

  // repeated string groups_ids = 6;
  for (int i = 0, n = this->_internal_groups_ids_size(); i < n; i++) {
    const auto& s = this->_internal_groups_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsRequest.groups_ids");
    target = stream->WriteString(6, s, target);
  }

  // repeated string templates_ids = 7;
  for (int i = 0, n = this->_internal_templates_ids_size(); i < n; i++) {
    const auto& s = this->_internal_templates_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsRequest.templates_ids");
    target = stream->WriteString(7, s, target);
  }

  // repeated string hosts_ids = 8;
  for (int i = 0, n = this->_internal_hosts_ids_size(); i < n; i++) {
    const auto& s = this->_internal_hosts_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsRequest.hosts_ids");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListItemsRequest)
  return target;
}

size_t ListItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListItemsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groups_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_ids_.size());
  for (int i = 0, n = groups_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_ids_.Get(i));
  }

  // repeated string templates_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templates_ids_.size());
  for (int i = 0, n = templates_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templates_ids_.Get(i));
  }

  // repeated string hosts_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hosts_ids_.size());
  for (int i = 0, n = hosts_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hosts_ids_.Get(i));
  }

  // string page_token = 5;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 4;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListItemsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListItemsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListItemsRequest::GetClassData() const { return &_class_data_; }

void ListItemsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListItemsRequest *>(to)->MergeFrom(
      static_cast<const ListItemsRequest &>(from));
}


void ListItemsRequest::MergeFrom(const ListItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_ids_.MergeFrom(from.groups_ids_);
  templates_ids_.MergeFrom(from.templates_ids_);
  hosts_ids_.MergeFrom(from.hosts_ids_);
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListItemsRequest::CopyFrom(const ListItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItemsRequest::IsInitialized() const {
  return true;
}

void ListItemsRequest::InternalSwap(ListItemsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_ids_.InternalSwap(&other->groups_ids_);
  templates_ids_.InternalSwap(&other->templates_ids_);
  hosts_ids_.InternalSwap(&other->hosts_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListItemsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[22]);
}

// ===================================================================

class ListItemsResponse::_Internal {
 public:
};

ListItemsResponse::ListItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListItemsResponse)
}
ListItemsResponse::ListItemsResponse(const ListItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.ListItemsResponse)
}

inline void ListItemsResponse::SharedCtor() {
next_page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListItemsResponse::~ListItemsResponse() {
  // @@protoc_insertion_point(destructor:zabmon.ListItemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.Destroy();
}

void ListItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListItemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListItemsResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListItemsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListItemsResponse)
  return target;
}

size_t ListItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListItemsResponse::GetClassData() const { return &_class_data_; }

void ListItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListItemsResponse *>(to)->MergeFrom(
      static_cast<const ListItemsResponse &>(from));
}


void ListItemsResponse::MergeFrom(const ListItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListItemsResponse::CopyFrom(const ListItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItemsResponse::IsInitialized() const {
  return true;
}

void ListItemsResponse::InternalSwap(ListItemsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[23]);
}

// ===================================================================

class ListTemplatesRequest::_Internal {
 public:
};

ListTemplatesRequest::ListTemplatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListTemplatesRequest)
}
ListTemplatesRequest::ListTemplatesRequest(const ListTemplatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_ids_(from.groups_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:zabmon.ListTemplatesRequest)
}

inline void ListTemplatesRequest::SharedCtor() {
page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListTemplatesRequest::~ListTemplatesRequest() {
  // @@protoc_insertion_point(destructor:zabmon.ListTemplatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTemplatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.Destroy();
}

void ListTemplatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTemplatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListTemplatesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_ids_.Clear();
  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTemplatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListTemplatesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      // repeated string groups_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListTemplatesRequest.groups_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTemplatesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListTemplatesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListTemplatesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  // repeated string groups_ids = 4;
  for (int i = 0, n = this->_internal_groups_ids_size(); i < n; i++) {
    const auto& s = this->_internal_groups_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListTemplatesRequest.groups_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListTemplatesRequest)
  return target;
}

size_t ListTemplatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListTemplatesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groups_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_ids_.size());
  for (int i = 0, n = groups_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_ids_.Get(i));
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTemplatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTemplatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTemplatesRequest::GetClassData() const { return &_class_data_; }

void ListTemplatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListTemplatesRequest *>(to)->MergeFrom(
      static_cast<const ListTemplatesRequest &>(from));
}


void ListTemplatesRequest::MergeFrom(const ListTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_ids_.MergeFrom(from.groups_ids_);
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTemplatesRequest::CopyFrom(const ListTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTemplatesRequest::IsInitialized() const {
  return true;
}

void ListTemplatesRequest::InternalSwap(ListTemplatesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_ids_.InternalSwap(&other->groups_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTemplatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[24]);
}

// ===================================================================

class ListTemplatesResponse::_Internal {
 public:
};

ListTemplatesResponse::ListTemplatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  templates_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zabmon.ListTemplatesResponse)
}
ListTemplatesResponse::ListTemplatesResponse(const ListTemplatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      templates_(from.templates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zabmon.ListTemplatesResponse)
}

inline void ListTemplatesResponse::SharedCtor() {
next_page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListTemplatesResponse::~ListTemplatesResponse() {
  // @@protoc_insertion_point(destructor:zabmon.ListTemplatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTemplatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.Destroy();
}

void ListTemplatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTemplatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zabmon.ListTemplatesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templates_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTemplatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zabmon.Template templates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zabmon.ListTemplatesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTemplatesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zabmon.ListTemplatesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zabmon.Template templates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_templates_size()); i < n; i++) {
    const auto& repfield = this->_internal_templates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zabmon.ListTemplatesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zabmon.ListTemplatesResponse)
  return target;
}

size_t ListTemplatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zabmon.ListTemplatesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zabmon.Template templates = 1;
  total_size += 1UL * this->_internal_templates_size();
  for (const auto& msg : this->templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTemplatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTemplatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTemplatesResponse::GetClassData() const { return &_class_data_; }

void ListTemplatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListTemplatesResponse *>(to)->MergeFrom(
      static_cast<const ListTemplatesResponse &>(from));
}


void ListTemplatesResponse::MergeFrom(const ListTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zabmon.ListTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  templates_.MergeFrom(from.templates_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTemplatesResponse::CopyFrom(const ListTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zabmon.ListTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTemplatesResponse::IsInitialized() const {
  return true;
}

void ListTemplatesResponse::InternalSwap(ListTemplatesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  templates_.InternalSwap(&other->templates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTemplatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zabmon_2eproto_getter, &descriptor_table_zabmon_2eproto_once,
      file_level_metadata_zabmon_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zabmon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zabmon::Item*
Arena::CreateMaybeMessage< ::zabmon::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ItemValues*
Arena::CreateMaybeMessage< ::zabmon::ItemValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ItemValues >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::Value*
Arena::CreateMaybeMessage< ::zabmon::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::Group*
Arena::CreateMaybeMessage< ::zabmon::Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::Group >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::Interface*
Arena::CreateMaybeMessage< ::zabmon::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::Template*
Arena::CreateMaybeMessage< ::zabmon::Template >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::Template >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::Host*
Arena::CreateMaybeMessage< ::zabmon::Host >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::Host >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::CreateHostRequest*
Arena::CreateMaybeMessage< ::zabmon::CreateHostRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::CreateHostRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::UpdateHostRequest*
Arena::CreateMaybeMessage< ::zabmon::UpdateHostRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::UpdateHostRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::DeleteHostRequest*
Arena::CreateMaybeMessage< ::zabmon::DeleteHostRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::DeleteHostRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListHostsRequest*
Arena::CreateMaybeMessage< ::zabmon::ListHostsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListHostsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListHostsResponse*
Arena::CreateMaybeMessage< ::zabmon::ListHostsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListHostsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListGroupsRequest*
Arena::CreateMaybeMessage< ::zabmon::ListGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListGroupsResponse*
Arena::CreateMaybeMessage< ::zabmon::ListGroupsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListGroupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::CreateGroupRequest*
Arena::CreateMaybeMessage< ::zabmon::CreateGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::CreateGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::DeleteGroupRequest*
Arena::CreateMaybeMessage< ::zabmon::DeleteGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::DeleteGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::CreateTemplateRequest*
Arena::CreateMaybeMessage< ::zabmon::CreateTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::CreateTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::DeleteTemplateRequest*
Arena::CreateMaybeMessage< ::zabmon::DeleteTemplateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::DeleteTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::CreateItemRequest*
Arena::CreateMaybeMessage< ::zabmon::CreateItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::CreateItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::DeleteItemRequest*
Arena::CreateMaybeMessage< ::zabmon::DeleteItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::DeleteItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListItemsValuesRequest*
Arena::CreateMaybeMessage< ::zabmon::ListItemsValuesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListItemsValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListItemsValuesResponse*
Arena::CreateMaybeMessage< ::zabmon::ListItemsValuesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListItemsValuesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListItemsRequest*
Arena::CreateMaybeMessage< ::zabmon::ListItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListItemsResponse*
Arena::CreateMaybeMessage< ::zabmon::ListItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListTemplatesRequest*
Arena::CreateMaybeMessage< ::zabmon::ListTemplatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListTemplatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zabmon::ListTemplatesResponse*
Arena::CreateMaybeMessage< ::zabmon::ListTemplatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zabmon::ListTemplatesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
